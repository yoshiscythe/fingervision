/* Auto-generated by genmsg_cpp for file /home/suzuki/ros_ws/ay_tools/fingervision/suzuki/rubbing_hand/msg/dynamixel_param_msg.msg */
#ifndef RUBBING_HAND_MESSAGE_DYNAMIXEL_PARAM_MSG_H
#define RUBBING_HAND_MESSAGE_DYNAMIXEL_PARAM_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rubbing_hand
{
template <class ContainerAllocator>
struct dynamixel_param_msg_ {
  typedef dynamixel_param_msg_<ContainerAllocator> Type;

  dynamixel_param_msg_()
  : surface_pos(0)
  , interval(0.0)
  , fps(0.0)
  , trg_pos()
  {
  }

  dynamixel_param_msg_(const ContainerAllocator& _alloc)
  : surface_pos(0)
  , interval(0.0)
  , fps(0.0)
  , trg_pos(_alloc)
  {
  }

  typedef int32_t _surface_pos_type;
  int32_t surface_pos;

  typedef double _interval_type;
  double interval;

  typedef double _fps_type;
  double fps;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _trg_pos_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  trg_pos;


  typedef boost::shared_ptr< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct dynamixel_param_msg
typedef  ::rubbing_hand::dynamixel_param_msg_<std::allocator<void> > dynamixel_param_msg;

typedef boost::shared_ptr< ::rubbing_hand::dynamixel_param_msg> dynamixel_param_msgPtr;
typedef boost::shared_ptr< ::rubbing_hand::dynamixel_param_msg const> dynamixel_param_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rubbing_hand

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cdac21b3e022c4862c8d9fd54fe39a8b";
  }

  static const char* value(const  ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcdac21b3e022c486ULL;
  static const uint64_t static_value2 = 0x2c8d9fd54fe39a8bULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/dynamixel_param_msg";
  }

  static const char* value(const  ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 surface_pos\n\
float64 interval\n\
float64 fps\n\
int32[] trg_pos\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.surface_pos);
    stream.next(m.interval);
    stream.next(m.fps);
    stream.next(m.trg_pos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct dynamixel_param_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rubbing_hand::dynamixel_param_msg_<ContainerAllocator> & v) 
  {
    s << indent << "surface_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.surface_pos);
    s << indent << "interval: ";
    Printer<double>::stream(s, indent + "  ", v.interval);
    s << indent << "fps: ";
    Printer<double>::stream(s, indent + "  ", v.fps);
    s << indent << "trg_pos[]" << std::endl;
    for (size_t i = 0; i < v.trg_pos.size(); ++i)
    {
      s << indent << "  trg_pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.trg_pos[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RUBBING_HAND_MESSAGE_DYNAMIXEL_PARAM_MSG_H


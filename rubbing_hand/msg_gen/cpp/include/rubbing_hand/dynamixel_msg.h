/* Auto-generated by genmsg_cpp for file /home/suzuki/ros_ws/ay_tools/fingervision/suzuki/rubbing_hand/msg/dynamixel_msg.msg */
#ifndef RUBBING_HAND_MESSAGE_DYNAMIXEL_MSG_H
#define RUBBING_HAND_MESSAGE_DYNAMIXEL_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace rubbing_hand
{
template <class ContainerAllocator>
struct dynamixel_msg_ {
  typedef dynamixel_msg_<ContainerAllocator> Type;

  dynamixel_msg_()
  : header()
  , Vel()
  , Pos()
  , Pwm()
  , Cur()
  {
  }

  dynamixel_msg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , Vel(_alloc)
  , Pos(_alloc)
  , Pwm(_alloc)
  , Cur(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Vel_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  Vel;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Pos_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  Pos;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Pwm_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  Pwm;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Cur_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  Cur;


  typedef boost::shared_ptr< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::dynamixel_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct dynamixel_msg
typedef  ::rubbing_hand::dynamixel_msg_<std::allocator<void> > dynamixel_msg;

typedef boost::shared_ptr< ::rubbing_hand::dynamixel_msg> dynamixel_msgPtr;
typedef boost::shared_ptr< ::rubbing_hand::dynamixel_msg const> dynamixel_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rubbing_hand::dynamixel_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rubbing_hand

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::dynamixel_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3127eca2d56f589248d9619270c9d91";
  }

  static const char* value(const  ::rubbing_hand::dynamixel_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe3127eca2d56f589ULL;
  static const uint64_t static_value2 = 0x248d9619270c9d91ULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/dynamixel_msg";
  }

  static const char* value(const  ::rubbing_hand::dynamixel_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32[] Vel\n\
int32[] Pos\n\
int32[] Pwm\n\
int32[] Cur\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::dynamixel_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rubbing_hand::dynamixel_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.Vel);
    stream.next(m.Pos);
    stream.next(m.Pwm);
    stream.next(m.Cur);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct dynamixel_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rubbing_hand::dynamixel_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rubbing_hand::dynamixel_msg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Vel[]" << std::endl;
    for (size_t i = 0; i < v.Vel.size(); ++i)
    {
      s << indent << "  Vel[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Vel[i]);
    }
    s << indent << "Pos[]" << std::endl;
    for (size_t i = 0; i < v.Pos.size(); ++i)
    {
      s << indent << "  Pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Pos[i]);
    }
    s << indent << "Pwm[]" << std::endl;
    for (size_t i = 0; i < v.Pwm.size(); ++i)
    {
      s << indent << "  Pwm[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Pwm[i]);
    }
    s << indent << "Cur[]" << std::endl;
    for (size_t i = 0; i < v.Cur.size(); ++i)
    {
      s << indent << "  Cur[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Cur[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RUBBING_HAND_MESSAGE_DYNAMIXEL_MSG_H


/* Auto-generated by genmsg_cpp for file /home/suzuki/ros_ws/ay_tools/fingervision/suzuki/rubbing_hand/srv/Set2Float64.srv */
#ifndef RUBBING_HAND_SERVICE_SET2FLOAT64_H
#define RUBBING_HAND_SERVICE_SET2FLOAT64_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rubbing_hand
{
template <class ContainerAllocator>
struct Set2Float64Request_ {
  typedef Set2Float64Request_<ContainerAllocator> Type;

  Set2Float64Request_()
  : data1(0.0)
  , data2(0.0)
  {
  }

  Set2Float64Request_(const ContainerAllocator& _alloc)
  : data1(0.0)
  , data2(0.0)
  {
  }

  typedef double _data1_type;
  double data1;

  typedef double _data2_type;
  double data2;


  typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Request_<ContainerAllocator>  const> ConstPtr;
}; // struct Set2Float64Request
typedef  ::rubbing_hand::Set2Float64Request_<std::allocator<void> > Set2Float64Request;

typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Request> Set2Float64RequestPtr;
typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Request const> Set2Float64RequestConstPtr;



template <class ContainerAllocator>
struct Set2Float64Response_ {
  typedef Set2Float64Response_<ContainerAllocator> Type;

  Set2Float64Response_()
  : result(false)
  {
  }

  Set2Float64Response_(const ContainerAllocator& _alloc)
  : result(false)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;


  typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Response_<ContainerAllocator>  const> ConstPtr;
}; // struct Set2Float64Response
typedef  ::rubbing_hand::Set2Float64Response_<std::allocator<void> > Set2Float64Response;

typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Response> Set2Float64ResponsePtr;
typedef boost::shared_ptr< ::rubbing_hand::Set2Float64Response const> Set2Float64ResponseConstPtr;


struct Set2Float64
{

typedef Set2Float64Request Request;
typedef Set2Float64Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Set2Float64
} // namespace rubbing_hand

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::Set2Float64Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc8a80b6983735ea28977d1f8b7b5f10";
  }

  static const char* value(const  ::rubbing_hand::Set2Float64Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfc8a80b6983735eaULL;
  static const uint64_t static_value2 = 0x28977d1f8b7b5f10ULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/Set2Float64Request";
  }

  static const char* value(const  ::rubbing_hand::Set2Float64Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 data1\n\
float64 data2\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::Set2Float64Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::Set2Float64Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const  ::rubbing_hand::Set2Float64Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/Set2Float64Response";
  }

  static const char* value(const  ::rubbing_hand::Set2Float64Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool result\n\
\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::Set2Float64Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::Set2Float64Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data1);
    stream.next(m.data2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Set2Float64Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::Set2Float64Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Set2Float64Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rubbing_hand::Set2Float64> {
  static const char* value() 
  {
    return "1a060548b1bc718fe8b44339268f4d29";
  }

  static const char* value(const rubbing_hand::Set2Float64&) { return value(); } 
};

template<>
struct DataType<rubbing_hand::Set2Float64> {
  static const char* value() 
  {
    return "rubbing_hand/Set2Float64";
  }

  static const char* value(const rubbing_hand::Set2Float64&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rubbing_hand::Set2Float64Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a060548b1bc718fe8b44339268f4d29";
  }

  static const char* value(const rubbing_hand::Set2Float64Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rubbing_hand::Set2Float64Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/Set2Float64";
  }

  static const char* value(const rubbing_hand::Set2Float64Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rubbing_hand::Set2Float64Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a060548b1bc718fe8b44339268f4d29";
  }

  static const char* value(const rubbing_hand::Set2Float64Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rubbing_hand::Set2Float64Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/Set2Float64";
  }

  static const char* value(const rubbing_hand::Set2Float64Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RUBBING_HAND_SERVICE_SET2FLOAT64_H


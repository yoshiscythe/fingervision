/* Auto-generated by genmsg_cpp for file /home/suzuki/ros_ws/ay_tools/fingervision/suzuki/rubbing_hand/msg/Float64.msg */
#ifndef RUBBING_HAND_MESSAGE_FLOAT64_H
#define RUBBING_HAND_MESSAGE_FLOAT64_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rubbing_hand
{
template <class ContainerAllocator>
struct Float64_ {
  typedef Float64_<ContainerAllocator> Type;

  Float64_()
  : data(0.0)
  {
  }

  Float64_(const ContainerAllocator& _alloc)
  : data(0.0)
  {
  }

  typedef double _data_type;
  double data;


  typedef boost::shared_ptr< ::rubbing_hand::Float64_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::Float64_<ContainerAllocator>  const> ConstPtr;
}; // struct Float64
typedef  ::rubbing_hand::Float64_<std::allocator<void> > Float64;

typedef boost::shared_ptr< ::rubbing_hand::Float64> Float64Ptr;
typedef boost::shared_ptr< ::rubbing_hand::Float64 const> Float64ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rubbing_hand::Float64_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rubbing_hand::Float64_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rubbing_hand

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::Float64_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::Float64_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::Float64_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fdb28210bfa9d7c91146260178d9a584";
  }

  static const char* value(const  ::rubbing_hand::Float64_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfdb28210bfa9d7c9ULL;
  static const uint64_t static_value2 = 0x1146260178d9a584ULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::Float64_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/Float64";
  }

  static const char* value(const  ::rubbing_hand::Float64_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::Float64_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 data\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::Float64_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rubbing_hand::Float64_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::Float64_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Float64_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rubbing_hand::Float64_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rubbing_hand::Float64_<ContainerAllocator> & v) 
  {
    s << indent << "data: ";
    Printer<double>::stream(s, indent + "  ", v.data);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RUBBING_HAND_MESSAGE_FLOAT64_H


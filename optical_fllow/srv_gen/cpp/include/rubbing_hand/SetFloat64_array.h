/* Auto-generated by genmsg_cpp for file /home/suzuki/ros_ws/ay_tools/fingervision/suzuki/rubbing_hand/srv/SetFloat64_array.srv */
#ifndef RUBBING_HAND_SERVICE_SETFLOAT64_ARRAY_H
#define RUBBING_HAND_SERVICE_SETFLOAT64_ARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rubbing_hand
{
template <class ContainerAllocator>
struct SetFloat64_arrayRequest_ {
  typedef SetFloat64_arrayRequest_<ContainerAllocator> Type;

  SetFloat64_arrayRequest_()
  : data()
  {
  }

  SetFloat64_arrayRequest_(const ContainerAllocator& _alloc)
  : data(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  data;


  typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SetFloat64_arrayRequest
typedef  ::rubbing_hand::SetFloat64_arrayRequest_<std::allocator<void> > SetFloat64_arrayRequest;

typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayRequest> SetFloat64_arrayRequestPtr;
typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayRequest const> SetFloat64_arrayRequestConstPtr;



template <class ContainerAllocator>
struct SetFloat64_arrayResponse_ {
  typedef SetFloat64_arrayResponse_<ContainerAllocator> Type;

  SetFloat64_arrayResponse_()
  : result(false)
  {
  }

  SetFloat64_arrayResponse_(const ContainerAllocator& _alloc)
  : result(false)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;


  typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SetFloat64_arrayResponse
typedef  ::rubbing_hand::SetFloat64_arrayResponse_<std::allocator<void> > SetFloat64_arrayResponse;

typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayResponse> SetFloat64_arrayResponsePtr;
typedef boost::shared_ptr< ::rubbing_hand::SetFloat64_arrayResponse const> SetFloat64_arrayResponseConstPtr;


struct SetFloat64_array
{

typedef SetFloat64_arrayRequest Request;
typedef SetFloat64_arrayResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetFloat64_array
} // namespace rubbing_hand

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "788898178a3da2c3718461eecda8f714";
  }

  static const char* value(const  ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x788898178a3da2c3ULL;
  static const uint64_t static_value2 = 0x718461eecda8f714ULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/SetFloat64_arrayRequest";
  }

  static const char* value(const  ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] data\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const  ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/SetFloat64_arrayResponse";
  }

  static const char* value(const  ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool result\n\
\n\
\n\
";
  }

  static const char* value(const  ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SetFloat64_arrayRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SetFloat64_arrayResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rubbing_hand::SetFloat64_array> {
  static const char* value() 
  {
    return "ae13d2079549ecafaa66d49d24c80c49";
  }

  static const char* value(const rubbing_hand::SetFloat64_array&) { return value(); } 
};

template<>
struct DataType<rubbing_hand::SetFloat64_array> {
  static const char* value() 
  {
    return "rubbing_hand/SetFloat64_array";
  }

  static const char* value(const rubbing_hand::SetFloat64_array&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae13d2079549ecafaa66d49d24c80c49";
  }

  static const char* value(const rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/SetFloat64_array";
  }

  static const char* value(const rubbing_hand::SetFloat64_arrayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae13d2079549ecafaa66d49d24c80c49";
  }

  static const char* value(const rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rubbing_hand/SetFloat64_array";
  }

  static const char* value(const rubbing_hand::SetFloat64_arrayResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RUBBING_HAND_SERVICE_SETFLOAT64_ARRAY_H

